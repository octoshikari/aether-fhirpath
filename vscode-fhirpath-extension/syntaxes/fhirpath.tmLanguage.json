{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "FHIRPath",
  "scopeName": "source.fhirpath",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#booleans"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#identifiers"
    },
    {
      "include": "#punctuation"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.fhirpath",
          "begin": "//",
          "end": "$",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.fhirpath"
            }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.single.fhirpath",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.fhirpath",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.double.fhirpath",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.fhirpath",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.decimal.fhirpath",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.fhirpath",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "booleans": {
      "patterns": [
        {
          "name": "constant.language.boolean.fhirpath",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "support.function.builtin.fhirpath",
          "match": "\\b(empty|exists|count|length|toString|toInteger|toDecimal|toBoolean|toDateTime|toDate|toTime|convertsToString|convertsToInteger|convertsToDecimal|convertsToBoolean|convertsToDateTime|convertsToDate|convertsToTime|first|last|tail|skip|take|intersect|exclude|union|combine|distinct|isDistinct|subsetOf|supersetOf|where|select|repeat|ofType|as|is|single|all|allTrue|anyTrue|allFalse|anyFalse|contains|indexOf|substring|startsWith|endsWith|matches|replaceMatches|replace|split|join|lower|upper|toChars|abs|ceiling|exp|floor|ln|log|power|round|sqrt|truncate|now|today|timeOfDay)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.logical.fhirpath",
          "match": "\\b(and|or|xor|implies)\\b"
        },
        {
          "name": "keyword.operator.comparison.fhirpath",
          "match": "(=|!=|<>|<|<=|>|>=|~|!~)"
        },
        {
          "name": "keyword.operator.arithmetic.fhirpath",
          "match": "(\\+|\\-|\\*|\\/|\\bmod\\b|\\bdiv\\b)"
        },
        {
          "name": "keyword.operator.union.fhirpath",
          "match": "\\|"
        },
        {
          "name": "keyword.operator.membership.fhirpath",
          "match": "\\bin\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.fhirpath",
          "match": "\\b(if|then|else)\\b"
        },
        {
          "name": "keyword.other.fhirpath",
          "match": "\\b(is|as|$this|$index|$total)\\b"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.property.fhirpath",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b(?=\\s*[.\\[])"
        },
        {
          "name": "variable.other.fhirpath",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.accessor.fhirpath",
          "match": "\\."
        },
        {
          "name": "punctuation.section.brackets.begin.fhirpath",
          "match": "\\["
        },
        {
          "name": "punctuation.section.brackets.end.fhirpath",
          "match": "\\]"
        },
        {
          "name": "punctuation.section.parens.begin.fhirpath",
          "match": "\\("
        },
        {
          "name": "punctuation.section.parens.end.fhirpath",
          "match": "\\)"
        },
        {
          "name": "punctuation.section.braces.begin.fhirpath",
          "match": "\\{"
        },
        {
          "name": "punctuation.section.braces.end.fhirpath",
          "match": "\\}"
        },
        {
          "name": "punctuation.separator.comma.fhirpath",
          "match": ","
        },
        {
          "name": "punctuation.separator.semicolon.fhirpath",
          "match": ";"
        }
      ]
    }
  }
}
